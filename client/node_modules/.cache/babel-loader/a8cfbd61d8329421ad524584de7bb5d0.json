{"ast":null,"code":"import Chatkit from '@pusher/chatkit-client';\nimport axios from 'axios';\n\nfunction handleInput(event) {\n  const _event$target = event.target,\n        value = _event$target.value,\n        name = _event$target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nfunction connectToRoom(id = 'cce93be1-ae14-44a9-b6f7-29fed8921869') {\n  const currentUser = this.state.currentUser;\n  this.setState({\n    messages: []\n  });\n  return currentUser.subscribeToRoom({\n    roomId: \"\".concat(id),\n    messageLimit: 100,\n    hooks: {\n      onMessage: message => {\n        this.setState({\n          messages: [...this.state.messages, message]\n        });\n      },\n      onPresenceChanged: () => {\n        const currentRoom = this.state.currentRoom;\n        this.setState({\n          roomUsers: currentRoom.users.sort(a => {\n            if (a.presence.state === 'online') return -1;\n            return 1;\n          })\n        });\n      }\n    }\n  }).then(currentRoom => {\n    const roomName = currentRoom.customData && currentRoom.customData.isDirectMessage ? currentRoom.customData.userIds.filter(id => id !== currentUser.id)[0] : currentRoom.name;\n    this.setState({\n      currentRoom,\n      roomUsers: currentRoom.users,\n      rooms: currentUser.rooms,\n      roomName\n    });\n  }).catch(console.error);\n}\n\nfunction connectToChatkit(event) {\n  event.preventDefault();\n  const userId = this.state.userId;\n\n  if (userId === null || userId.trim() === '') {\n    alert('Invalid userId');\n    return;\n  }\n\n  axios.post('http://localhost:5200/users', {\n    userId\n  }).then(() => {\n    const tokenProvider = new Chatkit.TokenProvider({\n      url: 'http://localhost:5200/authenticate'\n    });\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:3dcd39c4-6265-4396-86e1-991370549997',\n      userId,\n      tokenProvider\n    });\n    return chatManager.connect({\n      onAddedToRoom: room => {\n        const rooms = this.state.rooms;\n        this.setState({\n          rooms: [...rooms, room]\n        });\n      }\n    }).then(currentUser => {\n      this.setState({\n        currentUser,\n        showLogin: false,\n        rooms: currentUser.rooms\n      }, () => connectToRoom.call(this));\n    });\n  }).catch(console.error);\n}\n\nfunction sendMessage(event) {\n  event.preventDefault();\n  const _this$state = this.state,\n        newMessage = _this$state.newMessage,\n        currentUser = _this$state.currentUser,\n        currentRoom = _this$state.currentRoom;\n  if (newMessage.trim() === '') return;\n  currentUser.sendMessage({\n    text: newMessage,\n    roomId: \"\".concat(currentRoom.id)\n  });\n  this.setState({\n    newMessage: ''\n  });\n}\n\nfunction createPrivateRoom(id) {\n  const _this$state2 = this.state,\n        currentUser = _this$state2.currentUser,\n        rooms = _this$state2.rooms;\n  const roomName = \"\".concat(currentUser.id, \"_\").concat(id);\n  const isPrivateChatCreated = rooms.filter(room => {\n    if (room.customData && room.customData.isDirectMessage) {\n      const arr = [currentUser.id, id];\n      const userIds = room.customData.userIds;\n\n      if (arr.sort().join('') === userIds.sort().join('')) {\n        return {\n          room\n        };\n      }\n    }\n\n    return false;\n  });\n\n  if (isPrivateChatCreated.length > 0) {\n    return Promise.resolve(isPrivateChatCreated[0]);\n  }\n\n  return currentUser.createRoom({\n    name: \"\".concat(roomName),\n    private: true,\n    addUserIds: [\"\".concat(id)],\n    customData: {\n      isDirectMessage: true,\n      userIds: [currentUser.id, id]\n    }\n  });\n}\n\nfunction sendDM(id) {\n  createPrivateRoom.call(this, id).then(room => {\n    connectToRoom.call(this, room.id);\n  });\n}\n\nfunction updateLanguage(event) {\n  const value = event.target.value;\n  const messages = this.state.messages;\n  this.setState({\n    language: value\n  });\n}\n\nexport { handleInput, updateLanguage, connectToRoom, connectToChatkit, sendMessage, sendDM };","map":{"version":3,"sources":["C:/Users/gueva/chattyElephant/client/src/methods.js"],"names":["Chatkit","axios","handleInput","event","target","value","name","setState","connectToRoom","id","currentUser","state","messages","subscribeToRoom","roomId","messageLimit","hooks","onMessage","message","onPresenceChanged","currentRoom","roomUsers","users","sort","a","presence","then","roomName","customData","isDirectMessage","userIds","filter","rooms","catch","console","error","connectToChatkit","preventDefault","userId","trim","alert","post","tokenProvider","TokenProvider","url","chatManager","ChatManager","instanceLocator","connect","onAddedToRoom","room","showLogin","call","sendMessage","newMessage","text","createPrivateRoom","isPrivateChatCreated","arr","join","length","Promise","resolve","createRoom","private","addUserIds","sendDM","updateLanguage","language"],"mappings":"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","sourcesContent":["import Chatkit from '@pusher/chatkit-client';\r\nimport axios from 'axios';\r\n\r\nfunction handleInput(event) {\r\n  const { value, name } = event.target;\r\n\r\n  this.setState({\r\n    [name]: value,\r\n  });\r\n}\r\n\r\nfunction connectToRoom(id = 'cce93be1-ae14-44a9-b6f7-29fed8921869') {\r\n    const { currentUser } = this.state;\r\n\r\n    this.setState({\r\n      messages: [],\r\n    });\r\n\r\n    return currentUser\r\n      .subscribeToRoom({\r\n        roomId: `${id}`,\r\n        messageLimit: 100,\r\n        hooks: {\r\n            onMessage: message => {\r\n                this.setState({\r\n                  messages: [...this.state.messages, message],\r\n                });\r\n        },\r\n        onPresenceChanged: () => {\r\n            const { currentRoom } = this.state;\r\n            this.setState({\r\n              roomUsers: currentRoom.users.sort(a => {\r\n                if (a.presence.state === 'online') return -1;\r\n\r\n                return 1;\r\n              }),\r\n            });\r\n          },\r\n        },\r\n      })\r\n      .then(currentRoom => {\r\n        const roomName =\r\n          currentRoom.customData && currentRoom.customData.isDirectMessage\r\n            ? currentRoom.customData.userIds.filter(\r\n                id => id !== currentUser.id\r\n              )[0]\r\n            : currentRoom.name;\r\n\r\n        this.setState({\r\n          currentRoom,\r\n          roomUsers: currentRoom.users,\r\n          rooms: currentUser.rooms,\r\n          roomName,\r\n        });\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\nfunction connectToChatkit(event) {\r\n  event.preventDefault();\r\n\r\n  const { userId } = this.state;\r\n\r\n  if (userId === null || userId.trim() === '') {\r\n    alert('Invalid userId');\r\n    return;\r\n  }\r\n\r\n  axios\r\n    .post('http://localhost:5200/users', { userId })\r\n    .then(() => {\r\n      const tokenProvider = new Chatkit.TokenProvider({\r\n        url: 'http://localhost:5200/authenticate',\r\n      });\r\n\r\n      const chatManager = new Chatkit.ChatManager({\r\n        instanceLocator: 'v1:us1:3dcd39c4-6265-4396-86e1-991370549997',\r\n        userId,\r\n        tokenProvider,\r\n      });\r\n\r\n      return chatManager\r\n        .connect({\r\n          onAddedToRoom: room => {\r\n            const { rooms } = this.state;\r\n            this.setState({\r\n              rooms: [...rooms, room],\r\n            });\r\n          },\r\n        })\r\n        .then(currentUser => {\r\n          this.setState(\r\n            {\r\n              currentUser,\r\n              showLogin: false,\r\n              rooms: currentUser.rooms,\r\n            },\r\n            () => connectToRoom.call(this)\r\n          );\r\n        });\r\n    })\r\n    .catch(console.error);\r\n}\r\n\r\nfunction sendMessage(event) {\r\n    event.preventDefault();\r\n    const { newMessage, currentUser, currentRoom } = this.state;\r\n\r\n    if (newMessage.trim() === '') return;\r\n\r\n    currentUser.sendMessage({\r\n      text: newMessage,\r\n      roomId: `${currentRoom.id}`,\r\n    });\r\n\r\n    this.setState({\r\n      newMessage: '',\r\n    });\r\n}\r\n\r\nfunction createPrivateRoom(id) {\r\n    const { currentUser, rooms } = this.state;\r\n    const roomName = `${currentUser.id}_${id}`;\r\n\r\n    const isPrivateChatCreated = rooms.filter(room => {\r\n      if (room.customData && room.customData.isDirectMessage) {\r\n        const arr = [currentUser.id, id];\r\n        const { userIds } = room.customData;\r\n\r\n        if (arr.sort().join('') === userIds.sort().join('')) {\r\n          return {\r\n            room,\r\n          };\r\n        }\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    if (isPrivateChatCreated.length > 0) {\r\n      return Promise.resolve(isPrivateChatCreated[0]);\r\n    }\r\n\r\n    return currentUser.createRoom({\r\n      name: `${roomName}`,\r\n      private: true,\r\n      addUserIds: [`${id}`],\r\n      customData: {\r\n        isDirectMessage: true,\r\n        userIds: [currentUser.id, id],\r\n      },\r\n    });\r\n  }\r\n\r\n  function sendDM(id) {\r\n    createPrivateRoom.call(this, id).then(room => {\r\n      connectToRoom.call(this, room.id);\r\n    });\r\n  }\r\n\r\n  function updateLanguage(event) {\r\n    const { value } = event.target;\r\n    const { messages } = this.state;\r\n    this.setState({\r\n      language: value,\r\n    });\r\n  }\r\n\r\nexport { handleInput, updateLanguage, connectToRoom, connectToChatkit, sendMessage, sendDM }"]},"metadata":{},"sourceType":"module"}